package lesson1;

public class Main {
    public static void main(String[] args) {
/**
 * у нас есть 3 стороны треугольника
 * Напечатать на консоли, какой это вид треугольника: разносторонний,
 * равнобедренный или равносторонний
 */
        int a = 12;
        int b = 13;
        int c = 15;

        /**
         * Управляющая конструкция, их 2, у нас есть строка старта
         *     псвм и она волняет все построчно сверху вниз. А нам нужно
         *      сделать так, что бы она какието строчки выполнила, а каке
         *      то нет и наоборот. Это делается с помощью управляющей
         *      конструкции. Они идентичны во всех языках программирования.
         *      Они все базируются лна булиеном типе, это тип, который либо
         *      "Да" либо "нет". Будем спрашивать у компьютера, а вот это правда
         *      или нет, если "да", то какой то кусок кода выполнится, если нет
         *      то кусок кода не выполнится.
         *
         *      как записывать управляющую конструкцию:
         *      она записывается if(){
         *      }
         *      в круглых скобках мы должны спросить, а правда ли что
         *       3 меньше 2, если да, то кусок кода в фигурных скобках
         *       выполнится, если компьютер скажет нет, то не выполнится.
         *       Иногда к ИФ прикрепляем оробратьную сторону.
         *       обратная сторона это elso. Выполняется либо то либо это.
         *       if(3 меньше 2) {1
         *       }else{2
         *       }
         *       Итак, если выполняется, то это 1 если нет то это 2.
         *
         *       Итак, какой треугольник легче вусего построить,
         *       мы видим что все стороны разные, т.е. разносторонний.
         *       внутри скобки 1, а правда ли, что а и b и c одинаковые
         *       a == b а правда ли что а такая же как и б
         *       у нас разногсторонний треугольник, == меняем одно равно
         *       на ! знак, т.е. а != б, это а не равноб, это одна сторона.
         *       Нам нужно проверить, что б не с и с не а ии все в один момент
         *       времени, тут нам нужно объеденить выражения, это делается
         *       двойным амперосантом && (переводится и в тоже самое время) и даем сторое выражение, которое дает
         *       true oder fals. Все три выражения должны дать ДА! что бы все посчиталось да, т.к.
         *       они объединены значком амперссанта &&.
         *       Внутри 1 первой фигурной скобки делаем вывод sout
         *       Внутри обратной стороны у else, есть не один вариант, а осталось 2 варианта
         *       (равносторонний и равнобедренный). В этом случае мы else
         *       добавляем условие else if(), этот еще одно условие. Ну теперь смотрим
         *       какой легче высчитать равнобедренный или равносторонний.
         *       Конечно равносторонний, потомучто равнобедренный может быть
         *       в 3х вариантах, у нас 3 разные стороны.
         *       Мы должны понять, у нас а такая же как и б, б как и с и с как а в
         *       одно и тоже время &&.
         *       Если в первом варианте программа сказала нет и во стором тоже нет, то в 3
         *       варианте условия else условие if не нужно. Тогда точно равнобедренный, 4 варианта не бывает.
         *       Вставок else может быть сколько угодно.
         *
         *
         */

        if(a != b && b !=c && c !=a) {
            System.out.println("Scalene triangle!!!");
        }else if(a == b && b == c && c == a) {
            System.out.println("Equilateral triangle!!!");
        }else {
            System.out.println("Isosceles triangle!!!");
        }

    }

}

/**
 * Запуск программы в режиме ДЕБАГА, посмотреть поэтапно, что программа
 * делает. Можем поставить точку остановки на любой из строчек.
 * Правой кнопкой мышки напротив строчки. Красная точка, и запускаем РАП в вид е жучка
 * Второй вариант после зеленой стреллки, когда запускаем весь код. Правая кнопка мышуи - жучок.
 * Далше нажимаем при  красной точке следующий шаг, а=12, следующий б=13 и т.д.
 * Проверка выражения, наводишь на него и смотришь, а такая жке каак
 * в, в такая же как с  и т.д., это проверка по шагам.
 *
 *
 */
